name: Version Management

on:
  push:
    branches:
      - main
    paths:
      - 'CHANGELOG.md'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      has-new-version: ${{ steps.check-new-version.outputs.has-new-version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Get latest version from changelog
        id: get-version
        run: |
          VERSION=$(grep -oP '## \[\K[0-9]+\.[0-9]+\.[0-9]+(?=\])' CHANGELOG.md | head -1)
          echo "::set-output name=version::$VERSION"
      
      - name: Check if version exists
        id: check-new-version
        run: |
          if git rev-parse "v${{ steps.get-version.outputs.version }}" >/dev/null 2>&1; then
            echo "::set-output name=has-new-version::false"
          else
            echo "::set-output name=has-new-version::true"
          fi

  create-tag:
    needs: check-version
    if: needs.check-version.outputs.has-new-version == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Create and push tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ needs.check-version.outputs.version }}" -m "Release v${{ needs.check-version.outputs.version }}"
          git push origin "v${{ needs.check-version.outputs.version }}"
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          release_name: Release v${{ needs.check-version.outputs.version }}
          body: |
            See the [CHANGELOG](./CHANGELOG.md) for details.
          draft: false
          prerelease: false 